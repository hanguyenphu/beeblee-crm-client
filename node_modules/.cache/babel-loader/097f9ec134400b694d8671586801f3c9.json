{"ast":null,"code":"import _objectSpread from \"/Users/hanguyen/web-projects/crm-beeblee-node/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/hanguyen/web-projects/crm-beeblee-node/client/src/features/contact/ContactForm.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { TextInput, Icon, Button, Row } from \"react-materialize\";\nimport API from \"../../utils/API/API\";\nimport formatPhone from \"../../utils/commons/FormatPhone\";\n\nclass ContactForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCreateContact = e => {\n      e.preventDefault();\n      const contact = this.state.contact;\n      const business = this.props.business || {};\n\n      if (business) {\n        contact.business = business._id;\n      }\n\n      API.post(`contacts`, contact).then(response => {\n        if (response.data.duplicated) {\n          this.setState({\n            dublicated: true,\n            dublicatedContact: response.data.contact\n          });\n        } else {\n          this.setState({\n            successMessage: \"Save successfully\"\n          });\n          this.props.addMoreContactToTable(response.data.contact);\n        }\n      }).catch(error => {\n        this.setState({\n          errorMessage: \"Cannot save the data\"\n        });\n      });\n    };\n\n    this.handleInputChange = e => {\n      this.setState(_objectSpread({}, this.state, {\n        successMessage: \"\",\n        errorMessage: \"\"\n      }));\n      const field = e.target.name;\n      let value = e.target.value;\n\n      if (field === \"phone\") {\n        value = formatPhone(value);\n      }\n\n      let contact = _objectSpread({}, this.state.contact, {\n        [field]: value\n      });\n\n      this.setState({\n        contact\n      });\n    };\n\n    this.cancelContact = e => {\n      e.preventDefault();\n      this.setState(_objectSpread({}, this.state, {\n        dublicated: false,\n        dublicatedContact: {},\n        successMessage: \"\",\n        errorMessage: \"\"\n      }));\n    };\n\n    this.useExistingContact = e => {\n      e.preventDefault();\n      const contact = this.state.dublicatedContact;\n      const business = this.props.business;\n      API.patch(`businesses/addContact/${business._id}`, contact).then(response => {\n        if (!business.contacts.includes(contact._id)) {\n          this.props.addMoreContactToTable(contact);\n        }\n\n        this.setState(_objectSpread({}, this.state, {\n          dublicated: false,\n          dublicatedContact: {},\n          successMessage: \"Save successfully\",\n          errorMessage: \"\"\n        }));\n      }).catch(error => {\n        this.setState({\n          errorMessage: \"Cannot save the contact to the business\"\n        });\n      });\n    };\n\n    this.state = {\n      contact: {\n        name: \"\",\n        phone: \"\",\n        email: \"\"\n      }\n    };\n  }\n\n  render() {\n    const contact = this.state.contact;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleCreateContact,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(TextInput, {\n      s: 12,\n      l: 2,\n      m: 2,\n      xl: 2,\n      label: \"Name\",\n      name: \"name\",\n      value: contact.name,\n      required: true,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(TextInput, {\n      s: 12,\n      l: 3,\n      m: 3,\n      xl: 3,\n      label: \"Phone\",\n      name: \"phone\",\n      value: contact.phone,\n      required: true,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(TextInput, {\n      s: 12,\n      l: 6,\n      m: 4,\n      xl: 4,\n      label: \"Email\",\n      email: true,\n      validate: true,\n      value: contact.email,\n      name: \"email\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Button, {\n      node: \"button\",\n      type: \"submit\",\n      waves: \"light\",\n      style: {\n        marginTop: \"20px\"\n      },\n      className: \"gradient-btn btn-red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Add\", React.createElement(Icon, {\n      left: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"save\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.state.successMessage && React.createElement(\"p\", {\n      className: \"green-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.successMessage)), this.state.dublicated && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      className: \"red-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"A contact has been found with this phone number\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Name: \", this.state.dublicatedContact.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Phone: \", this.state.dublicatedContact.phone), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Email: \", this.state.dublicatedContact.email), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.useExistingContact,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Use this contact\"), React.createElement(Button, {\n      className: \" black-text grey lighten-4\",\n      style: {\n        marginLeft: \"20px\"\n      },\n      onClick: this.cancelContact,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","map":{"version":3,"sources":["/Users/hanguyen/web-projects/crm-beeblee-node/client/src/features/contact/ContactForm.jsx"],"names":["React","Component","connect","TextInput","Icon","Button","Row","API","formatPhone","ContactForm","constructor","props","handleCreateContact","e","preventDefault","contact","state","business","_id","post","then","response","data","duplicated","setState","dublicated","dublicatedContact","successMessage","addMoreContactToTable","catch","error","errorMessage","handleInputChange","field","target","name","value","cancelContact","useExistingContact","patch","contacts","includes","phone","email","render","marginTop","marginLeft","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { TextInput, Icon, Button, Row } from \"react-materialize\";\nimport API from \"../../utils/API/API\";\n\nimport formatPhone from \"../../utils/commons/FormatPhone\"\n\nclass ContactForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contact: {\n                name: \"\",\n                phone: \"\",\n                email: \"\"\n            }\n        };\n    }\n\n    handleCreateContact = e => {\n        e.preventDefault();\n\n        const contact = this.state.contact;\n        const business = this.props.business || {};\n        if (business) {\n            contact.business = business._id;\n        }\n        API\n            .post(`contacts`, contact)\n            .then(response => {\n                if (response.data.duplicated) {\n                    this.setState({\n                        dublicated: true,\n                        dublicatedContact: response.data.contact\n                    });\n                } else {\n                    this.setState({\n                        successMessage: \"Save successfully\"\n                    });\n\n                    this.props.addMoreContactToTable(response.data.contact);\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    errorMessage: \"Cannot save the data\"\n                });\n            });\n    };\n\n    handleInputChange = e => {\n        this.setState({\n            ...this.state,\n            successMessage: \"\",\n            errorMessage: \"\"\n        });\n       \n        const field = e.target.name;\n        let value = e.target.value;\n\n        if (field === \"phone\") {\n            value=formatPhone(value)\n        }\n\n        let contact = {\n            ...this.state.contact,\n            [field]: value\n        };\n\n        this.setState({\n            contact\n        });\n    };\n\n    cancelContact = e => {\n        e.preventDefault();\n        this.setState({\n            ...this.state,\n            dublicated: false,\n            dublicatedContact: {},\n            successMessage: \"\",\n            errorMessage: \"\"\n        });\n    };\n\n    useExistingContact = e => {\n        e.preventDefault();\n        const contact = this.state.dublicatedContact;\n        const business = this.props.business;\n\n        API\n            .patch(`businesses/addContact/${business._id}`, contact)\n            .then(response => {\n                if (!business.contacts.includes(contact._id)) {\n                    this.props.addMoreContactToTable(contact);\n                }\n                this.setState({\n                    ...this.state,\n                    dublicated: false,\n                    dublicatedContact: {},\n                    successMessage: \"Save successfully\",\n                    errorMessage: \"\"\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    errorMessage: \"Cannot save the contact to the business\"\n                });\n            });\n    };\n\n    render() {\n        const contact = this.state.contact;\n\n        return (\n            <div>\n                <form onSubmit={this.handleCreateContact}>\n                    <Row>\n                        <TextInput\n                            s={12}\n                            l={2}\n                            m={2}\n                            xl={2}\n                            label='Name'\n                            name='name'\n                            value={contact.name}\n                            required\n                            onChange={this.handleInputChange}\n                        />\n                        <TextInput\n                            s={12}\n                            l={3}\n                            m={3}\n                            xl={3}\n                            label='Phone'\n                            name='phone'\n                            value={contact.phone}\n                            required\n                            onChange={this.handleInputChange}\n                        />\n                        <TextInput\n                            s={12}\n                            l={6}\n                            m={4}\n                            xl={4}\n                            label='Email'\n                            email\n                            validate\n                            value={contact.email}\n                            name='email'\n                            onChange={this.handleInputChange}\n                        />\n                        <Button\n                            node='button'\n                            type='submit'\n                            waves='light'\n                            style={{ marginTop: \"20px\" }}\n                            className=\"gradient-btn btn-red\"\n                        >\n                            Add\n                            <Icon left>save</Icon>\n                        </Button>\n                    </Row>\n                    <Row>\n                        {this.state.successMessage && (\n                            <p className='green-text'>\n                                {this.state.successMessage}\n                            </p>\n                        )}\n                    </Row>\n\n                    {this.state.dublicated && (\n                        <Row>\n                            <h6 className='red-text'>\n                                A contact has been found with this phone number\n                            </h6>\n                            <p>Name: {this.state.dublicatedContact.name}</p>\n                            <p>Phone: {this.state.dublicatedContact.phone}</p>\n                            <p>Email: {this.state.dublicatedContact.email}</p>\n                            <Row>\n                                <Button onClick={this.useExistingContact}>\n                                    Use this contact\n                                </Button>\n                                <Button\n                                    className=' black-text grey lighten-4'\n                                    style={{ marginLeft: \"20px\" }}\n                                    onClick={this.cancelContact}\n                                >\n                                    Cancel\n                                </Button>\n                            </Row>\n                        </Row>\n                    )}\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n"]},"metadata":{},"sourceType":"module"}