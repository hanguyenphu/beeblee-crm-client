{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Ha Nguyen\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\beeblee-crm-client\\\\src\\\\features\\\\business\\\\BusinessModalDetail.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button, Row, TextInput, Select } from \"react-materialize\";\nimport Loading from \"../loading/Loading\";\nimport ContactForm from \"../contact/ContactForm\";\nimport { ContactTable } from \"../contact/ContactTable\";\nimport API from \"../../utils/API/API\";\nimport formatPhone from \"../../utils/commons/FormatPhone\";\n\nclass BusinessModalDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeBusiness = e => {\n      const field = e.target.name;\n      let value = e.target.value;\n\n      if (field === \"phone\") {\n        value = formatPhone(value);\n      }\n\n      let business = this.state.business;\n      business[field] = value;\n      this.setState(_objectSpread({}, this.state, {\n        business,\n        edited: true\n      }));\n    };\n\n    this.updateBusiness = e => {\n      e.preventDefault();\n      const _id = this.state.business._id;\n      const business = {\n        name: this.state.business.name,\n        phone: this.state.business.phone,\n        address: this.state.business.address,\n        province: this.state.business.province\n      };\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loading: true,\n        edited: false\n      });\n      API.patch(`businesses/${_id}`, business).then(response => {\n        //Update the data in the parent component\n        this.props.updateData();\n        this.setState(_objectSpread({}, this.state, {\n          successMessage: 'Save successfully!',\n          loading: false\n        }));\n      }).catch(error => {\n        this.setState({\n          errorMessage: 'Cannot save the data!',\n          loading: false\n        });\n      });\n    };\n\n    this.addMoreContactToTable = contact => {\n      let contacts = this.state.contacts;\n      contacts.push(contact);\n      this.setState(_objectSpread({}, this.state, {\n        contacts\n      }));\n    };\n\n    this.state = {\n      edited: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      business: this.props.business\n    });\n    this.getBusinessDetail(this.props.business._id);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.business._id !== this.props.business._id) {\n      this.getBusinessDetail(this.props.business._id);\n      this.setState({\n        business: this.props.business,\n        errorMessage: '',\n        successMessage: '',\n        edited: false\n      });\n    }\n  }\n\n  getBusinessDetail(id) {\n    this.setState(_objectSpread({}, this.state, {\n      loading: true\n    }));\n    API.get(`businesses/${id}`).then(response => {\n      if (response.data.business) {\n        this.setState(_objectSpread({}, this.state, {\n          contacts: response.data.business.contacts,\n          province: response.data.business.province,\n          loading: false\n        }));\n      }\n    }).catch(err => {\n      this.setState({\n        loading: false,\n        errorMessage: 'Could not fetch the data'\n      });\n    });\n  }\n\n  displayProvince(_id) {\n    const provinces = this.props.provinces;\n    const province = provinces.filter(province => province._id === _id)[0];\n    return React.createElement(Select, {\n      options: {\n        classes: \"\",\n        dropdownOptions: {\n          alignment: \"left\",\n          autoTrigger: true,\n          closeOnClick: true,\n          constrainWidth: true,\n          container: null,\n          coverTrigger: true,\n          hover: false,\n          inDuration: 150,\n          onCloseEnd: null,\n          onCloseStart: null,\n          onOpenEnd: null,\n          onOpenStart: null,\n          outDuration: 250\n        }\n      },\n      onChange: this.handleChangeBusiness,\n      value: province._id,\n      name: \"province\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      disabled: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Select Province\"), provinces.map(province => {\n      return React.createElement(\"option\", {\n        className: \"black-text\",\n        key: province._id,\n        value: province._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, province.name);\n    }));\n  }\n\n  render() {\n    const contacts = this.state.contacts || [];\n\n    if (!this.state.business) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      });\n    }\n\n    const _this$state = this.state,\n          business = _this$state.business,\n          edited = _this$state.edited;\n    return React.createElement(Modal, {\n      actions: [React.createElement(Button, {\n        flat: true,\n        modal: \"close\",\n        node: \"button\",\n        waves: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Close\")],\n      open: true,\n      style: {\n        boder: \"none\"\n      },\n      bottomSheet: false,\n      fixedFooter: true,\n      header: \"Business Detail\",\n      id: \"modal1\",\n      required: true,\n      options: {\n        dismissible: true,\n        endingTop: \"10%\",\n        inDuration: 250,\n        onCloseEnd: null,\n        onCloseStart: null,\n        onOpenEnd: null,\n        onOpenStart: null,\n        opacity: 0.5,\n        outDuration: 250,\n        preventScrolling: true,\n        startingTop: \"4%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, !this.state.loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.updateBusiness,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(TextInput, {\n      s: 12,\n      l: 6,\n      m: 6,\n      xl: 6,\n      label: \"Name:\",\n      value: business.name,\n      name: \"name\",\n      onChange: this.handleChangeBusiness,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(TextInput, {\n      s: 12,\n      l: 6,\n      m: 6,\n      xl: 6,\n      label: \"Address\",\n      name: \"address\",\n      value: business.address,\n      onChange: this.handleChangeBusiness,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(TextInput, {\n      s: 12,\n      l: 6,\n      m: 6,\n      xl: 6,\n      label: \"Phone:\",\n      name: \"phone\",\n      value: business.phone,\n      onChange: this.handleChangeBusiness,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), this.displayProvince(business.province)), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Button, {\n      node: \"button\",\n      className: edited ? \"gradient-btn btn-primary\" : \"\",\n      waves: \"green\",\n      disabled: !edited,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Update\"))), this.state.successMessage && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"green-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.state.successMessage)), this.state.errorMessage && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"red-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.state.errorMessage)), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Contacts \"), React.createElement(ContactForm, {\n      business: business,\n      addMoreContactToTable: this.addMoreContactToTable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })), React.createElement(ContactTable, {\n      contacts: contacts,\n      business: business,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })) : React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    provinces: state.provinces\n  };\n};\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(BusinessModalDetail);","map":{"version":3,"sources":["C:/xampp/htdocs/beeblee-crm-client/src/features/business/BusinessModalDetail.jsx"],"names":["React","Component","connect","Modal","Button","Row","TextInput","Select","Loading","ContactForm","ContactTable","API","formatPhone","BusinessModalDetail","constructor","props","handleChangeBusiness","e","field","target","name","value","business","state","setState","edited","updateBusiness","preventDefault","_id","phone","address","province","errorMessage","successMessage","loading","patch","then","response","updateData","catch","error","addMoreContactToTable","contact","contacts","push","componentDidMount","getBusinessDetail","componentDidUpdate","prevProps","id","get","data","err","displayProvince","provinces","filter","classes","dropdownOptions","alignment","autoTrigger","closeOnClick","constrainWidth","container","coverTrigger","hover","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","map","render","boder","dismissible","endingTop","opacity","preventScrolling","startingTop","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Modal,\r\n    Button,\r\n    Row,\r\n    TextInput,\r\n    Select\r\n} from \"react-materialize\";\r\nimport Loading from \"../loading/Loading\";\r\n\r\nimport ContactForm from \"../contact/ContactForm\";\r\nimport { ContactTable } from \"../contact/ContactTable\";\r\nimport API from \"../../utils/API/API\";\r\nimport formatPhone from \"../../utils/commons/FormatPhone\"\r\n\r\n\r\nclass BusinessModalDetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            edited: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            business: this.props.business\r\n        });\r\n        this.getBusinessDetail(this.props.business._id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.business._id !== this.props.business._id){\r\n            this.getBusinessDetail(this.props.business._id)\r\n            this.setState({\r\n                business: this.props.business,\r\n                errorMessage:'',\r\n                successMessage:'',\r\n                edited: false\r\n            })\r\n        }\r\n    }\r\n\r\n    getBusinessDetail(id) {\r\n        this.setState({\r\n            ...this.state,\r\n            loading: true\r\n        });\r\n        API\r\n            .get(`businesses/${id}`)\r\n            .then(response => {\r\n                if (response.data.business) {\r\n\r\n                    this.setState({\r\n                        ...this.state,\r\n                        contacts: response.data.business.contacts,\r\n                        province: response.data.business.province,\r\n                        loading: false\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    loading: false,\r\n                    errorMessage:'Could not fetch the data',\r\n                });\r\n            });\r\n    }\r\n\r\n    handleChangeBusiness = e => {\r\n        const field = e.target.name\r\n        let value = e.target.value\r\n        if(field === \"phone\") {\r\n            value = formatPhone(value)\r\n        }\r\n        let business = this.state.business\r\n        business[field] = value\r\n        this.setState({\r\n            ...this.state,\r\n            business,\r\n            edited: true\r\n        })\r\n    };\r\n\r\n    updateBusiness = e => {\r\n        e.preventDefault()\r\n        const _id = this.state.business._id\r\n        const business = {\r\n            name: this.state.business.name,\r\n            phone: this.state.business.phone,\r\n            address: this.state.business.address,\r\n            province: this.state.business.province\r\n        }\r\n        this.setState({\r\n            errorMessage:'',\r\n            successMessage:'',\r\n            loading: true,\r\n            edited: false\r\n        })\r\n        API.patch(`businesses/${_id}`, business).then(response => {\r\n            //Update the data in the parent component\r\n          this.props.updateData()\r\n          this.setState({\r\n              ...this.state,\r\n              successMessage: 'Save successfully!',\r\n              loading: false\r\n          })\r\n        }).catch(error => {\r\n            this.setState({\r\n                errorMessage: 'Cannot save the data!',\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    displayProvince(_id) {\r\n        const { provinces } = this.props;\r\n        const province = provinces.filter(province => province._id === _id)[0];\r\n        return (\r\n            <Select\r\n                options={{\r\n                    classes: \"\",\r\n                    dropdownOptions: {\r\n                        alignment: \"left\",\r\n                        autoTrigger: true,\r\n                        closeOnClick: true,\r\n                        constrainWidth: true,\r\n                        container: null,\r\n                        coverTrigger: true,\r\n                        hover: false,\r\n                        inDuration: 150,\r\n                        onCloseEnd: null,\r\n                        onCloseStart: null,\r\n                        onOpenEnd: null,\r\n                        onOpenStart: null,\r\n                        outDuration: 250\r\n                    }\r\n                }}\r\n                onChange={this.handleChangeBusiness}\r\n                value={province._id}\r\n                name='province'\r\n            >\r\n                <option disabled value=''>\r\n                    Select Province\r\n                </option>\r\n                {provinces.map(province => {\r\n                    return (\r\n                        <option\r\n                            className='black-text'\r\n                            key={province._id}\r\n                            value={province._id}\r\n                        >\r\n                            {province.name}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </Select>\r\n        );\r\n    }\r\n\r\n    addMoreContactToTable = (contact) => {\r\n        let contacts = this.state.contacts\r\n        contacts.push(contact)\r\n        this.setState({\r\n            ...this.state,\r\n            contacts\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const contacts = this.state.contacts || [];\r\n        if(!this.state.business) {\r\n            return <Loading/>\r\n        }\r\n        const { business, edited } = this.state;\r\n        return (\r\n            <Modal\r\n                actions={[\r\n                    <Button flat modal='close' node='button' waves='green'>\r\n                        Close\r\n                    </Button>\r\n                ]}\r\n                open={true}\r\n                style={{ boder: \"none\" }}\r\n                bottomSheet={false}\r\n                fixedFooter={true}\r\n                header='Business Detail'\r\n                id='modal1'\r\n                required\r\n                options={{\r\n                    dismissible: true,\r\n                    endingTop: \"10%\",\r\n                    inDuration: 250,\r\n                    onCloseEnd: null,\r\n                    onCloseStart: null,\r\n                    onOpenEnd: null,\r\n                    onOpenStart: null,\r\n                    opacity: 0.5,\r\n                    outDuration: 250,\r\n                    preventScrolling: true,\r\n                    startingTop: \"4%\"\r\n                }}\r\n            >\r\n                {!this.state.loading ? (\r\n                    <div>\r\n                        <form onSubmit={this.updateBusiness}>\r\n                            <Row>\r\n                                <TextInput\r\n                                    s={12}\r\n                                    l={6}\r\n                                    m={6}\r\n                                    xl={6}\r\n                                    label='Name:'\r\n                                    value={business.name}\r\n                                    name='name'\r\n                                    onChange={this.handleChangeBusiness}\r\n                                    required\r\n                                />\r\n                                <TextInput\r\n                                    s={12}\r\n                                    l={6}\r\n                                    m={6}\r\n                                    xl={6}\r\n                                    label='Address'\r\n                                    name='address'\r\n                                    value={business.address}\r\n                                    onChange={this.handleChangeBusiness}\r\n                                    required\r\n                                />\r\n                                <TextInput\r\n                                    s={12}\r\n                                    l={6}\r\n                                    m={6}\r\n                                    xl={6}\r\n                                    label='Phone:'\r\n                                    name='phone'\r\n                                    value={business.phone}\r\n                                    onChange={this.handleChangeBusiness}\r\n                                    required\r\n                                />\r\n\r\n                                {this.displayProvince(business.province)}\r\n                            </Row>\r\n                            <Row>\r\n                                <Button node='button' className={edited? \"gradient-btn btn-primary\":\"\"}  waves='green' disabled={!edited}>\r\n                                    Update\r\n                                </Button>\r\n                            </Row>\r\n                        </form>\r\n                        {this.state.successMessage && <Row>\r\n                            <p className=\"green-text\">{this.state.successMessage}</p>\r\n                        </Row>}\r\n                        {this.state.errorMessage && <Row>\r\n                            <p className=\"red-text\">{this.state.errorMessage}</p>\r\n                        </Row>}\r\n\r\n                        <Row>\r\n                            <h5>Contacts </h5>\r\n                             <ContactForm business={business} addMoreContactToTable={this.addMoreContactToTable}/>\r\n                        </Row>\r\n                        <ContactTable contacts={contacts} business={business}/>\r\n\r\n                    </div>\r\n                ) : (\r\n                    <Loading />\r\n                )}\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { provinces: state.provinces };\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(BusinessModalDetail);\r\n"]},"metadata":{},"sourceType":"module"}