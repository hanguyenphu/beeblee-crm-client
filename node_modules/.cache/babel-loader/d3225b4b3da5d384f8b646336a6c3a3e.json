{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Ha Nguyen\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\beeblee-crm-client\\\\src\\\\features\\\\common\\\\DisplayStatus.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport API from '../../utils/API/API';\nimport Loading from '../loading/Loading';\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nclass DisplayStatus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      status: \"\",\n      statuses: []\n    };\n\n    this.displayStatus = status => {\n      let statuses = this.state.statuses;\n      let status2 = statuses.filter(status => {\n        return status._id == status;\n      });\n      console.log(status2);\n    };\n  }\n\n  componentDidMount() {\n    API.get(\"/statuses\").then(response => {\n      this.setState(_objectSpread({}, this.state, {\n        statuses: response.data,\n        loading: false\n      }));\n    }).catch(error => {\n      this.setState(_objectSpread({}, this.state, {\n        loading: false\n      }));\n      console.log(error);\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          status = _this$props.status,\n          loading = _this$props.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.displayStatus(status));\n  }\n\n}\n\nexport default connect(mapStateToProps)(DisplayStatus);","map":{"version":3,"sources":["C:/xampp/htdocs/beeblee-crm-client/src/features/common/DisplayStatus.jsx"],"names":["React","Component","connect","API","Loading","mapStateToProps","state","DisplayStatus","loading","status","statuses","displayStatus","status2","filter","_id","console","log","componentDidMount","get","then","response","setState","data","catch","error","render","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO,EAAP;AAGH;;AAED,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAClCK,KADkC,GAC1B;AACJE,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,QAAQ,EAAE;AAHN,KAD0B;;AAAA,SAuBlCC,aAvBkC,GAuBjBF,MAAD,IAAY;AACxB,UAAIC,QAAQ,GAAG,KAAKJ,KAAL,CAAWI,QAA1B;AAEC,UAAIE,OAAO,GAAGF,QAAQ,CAACG,MAAT,CAAgBJ,MAAM,IAAI;AACrC,eAAQA,MAAM,CAACK,GAAP,IAAcL,MAAtB;AACH,OAFc,CAAd;AAGDM,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AAEH,KA/BiC;AAAA;;AAMlCK,EAAAA,iBAAiB,GAAG;AAChBd,IAAAA,GAAG,CAACe,GAAJ,CAAQ,WAAR,EACCC,IADD,CACMC,QAAQ,IAAI;AAChB,WAAKC,QAAL,mBACK,KAAKf,KADV;AAEEI,QAAAA,QAAQ,EAAEU,QAAQ,CAACE,IAFrB;AAGEd,QAAAA,OAAO,EAAE;AAHX;AAKD,KAPD,EAQCe,KARD,CAQOC,KAAK,IAAI;AACd,WAAKH,QAAL,mBACK,KAAKf,KADV;AAEEE,QAAAA,OAAO,EAAE;AAFX;AAIAO,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,KAdD;AAeH;;AAUDC,EAAAA,MAAM,GAAG;AAAA,wBACqB,KAAKC,KAD1B;AAAA,UACEjB,MADF,eACEA,MADF;AAAA,UACUD,OADV,eACUA,OADV;;AAEL,QAAGA,OAAH,EAAW;AACP,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKG,aAAL,CAAmBF,MAAnB,CADL,CADJ;AAKH;;AA1CiC;;AA6CtC,eAAeP,OAAO,CAClBG,eADkB,CAAP,CAEbE,aAFa,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport API from '../../utils/API/API';\r\nimport Loading from '../loading/Loading';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nclass DisplayStatus extends Component {\r\n    state = {\r\n        loading: true,\r\n        status: \"\",\r\n        statuses: []\r\n      };\r\n    componentDidMount() {\r\n        API.get(\"/statuses\")\r\n        .then(response => {\r\n          this.setState({\r\n            ...this.state,\r\n            statuses: response.data,\r\n            loading: false\r\n          });\r\n        })\r\n        .catch(error => {\r\n          this.setState({\r\n            ...this.state,\r\n            loading: false\r\n          });\r\n          console.log(error);\r\n        });\r\n    }\r\n    displayStatus = (status) => {\r\n        let statuses = this.state.statuses\r\n\r\n         let status2 = statuses.filter(status => {\r\n            return  status._id == status\r\n        })\r\n        console.log(status2)\r\n\r\n    }\r\n    render() {\r\n        const {status, loading} = this.props\r\n        if(loading){\r\n            return <Loading/>\r\n        }\r\n        return (\r\n            <div>\r\n                {this.displayStatus(status)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(DisplayStatus);"]},"metadata":{},"sourceType":"module"}