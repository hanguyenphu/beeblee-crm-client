{"ast":null,"code":"import { AUTHENTICATE, LOGOUT, UPDATE_PROFILE } from \"../constants/action-types\";\nimport axios from \"axios\";\nconst initialState = {\n  user: {\n    authenticated: false\n  }\n};\n\nfunction rootReducer(state = initialState, action) {\n  if (action.type === AUTHENTICATE) {\n    //this check the token in localStorage and set the default values for authenticated request from client\n    if (localStorage.getItem(\"user\") && localStorage.getItem(\"token\")) {\n      const token = localStorage.getItem(\"token\"); // axios.defaults.baseURL = 'http://localhost:3000/'\n      // axios.defaults.headers.common= {'Authorization': `Bearer ${token}`}\n\n      return Object.assign({}, state, {\n        user: {\n          authenticated: action.payload.authenticated,\n          email: action.payload.user.email,\n          name: action.payload.user.name,\n          phone: action.payload.user.phone\n        }\n      });\n    }\n  }\n\n  if (action.type === UPDATE_PROFILE) {\n    return Object.assign({}, state, {\n      user: {\n        email: action.payload.user.email,\n        name: action.payload.user.name,\n        phone: action.payload.user.phone\n      }\n    });\n  } //logout the user and delete the token in localStorage and in the server as well\n\n\n  if (action.type === LOGOUT) {\n    localStorage.clear();\n    axios.post(`users/logout`).then(response => {\n      axios.defaults.baseURL = \"\";\n      axios.defaults.headers.common = {\n        Authorization: ``\n      };\n    }).catch(error => {});\n    return Object.assign({}, state, {\n      user: {\n        authenticated: false\n      }\n    });\n  }\n\n  return state;\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/hanguyen/web-projects/crm-beeblee-node/client/src/redux/reducers/index.js"],"names":["AUTHENTICATE","LOGOUT","UPDATE_PROFILE","axios","initialState","user","authenticated","rootReducer","state","action","type","localStorage","getItem","token","Object","assign","payload","email","name","phone","clear","post","then","response","defaults","baseURL","headers","common","Authorization","catch","error"],"mappings":"AAAA,SACIA,YADJ,EAEIC,MAFJ,EAGIC,cAHJ,QAIO,2BAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,aAAa,EAAE;AADb;AADW,CAArB;;AAMA,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,YAA7B,EAA2CK,MAA3C,EAAmD;AAC/C,MAAIA,MAAM,CAACC,IAAP,KAAgBV,YAApB,EAAkC;AAC9B;AACA,QAAIW,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgCD,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApC,EAAmE;AAC/D,YAAMC,KAAK,GAAGF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAD+D,CAE/D;AACA;;AAEA,aAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAC5BH,QAAAA,IAAI,EAAE;AACFC,UAAAA,aAAa,EAAEG,MAAM,CAACO,OAAP,CAAeV,aAD5B;AAEFW,UAAAA,KAAK,EAAER,MAAM,CAACO,OAAP,CAAeX,IAAf,CAAoBY,KAFzB;AAGFC,UAAAA,IAAI,EAAET,MAAM,CAACO,OAAP,CAAeX,IAAf,CAAoBa,IAHxB;AAIFC,UAAAA,KAAK,EAAEV,MAAM,CAACO,OAAP,CAAeX,IAAf,CAAoBc;AAJzB;AADsB,OAAzB,CAAP;AAQH;AACJ;;AAED,MAAIV,MAAM,CAACC,IAAP,KAAgBR,cAApB,EAAoC;AAChC,WAAOY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAC5BH,MAAAA,IAAI,EAAE;AACFY,QAAAA,KAAK,EAAER,MAAM,CAACO,OAAP,CAAeX,IAAf,CAAoBY,KADzB;AAEFC,QAAAA,IAAI,EAAET,MAAM,CAACO,OAAP,CAAeX,IAAf,CAAoBa,IAFxB;AAGFC,QAAAA,KAAK,EAAEV,MAAM,CAACO,OAAP,CAAeX,IAAf,CAAoBc;AAHzB;AADsB,KAAzB,CAAP;AAOH,GA3B8C,CA6B/C;;;AACA,MAAIV,MAAM,CAACC,IAAP,KAAgBT,MAApB,EAA4B;AACxBU,IAAAA,YAAY,CAACS,KAAb;AACAjB,IAAAA,KAAK,CACAkB,IADL,CACW,cADX,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdpB,MAAAA,KAAK,CAACqB,QAAN,CAAeC,OAAf,GAAyB,EAAzB;AACAtB,MAAAA,KAAK,CAACqB,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,GAAgC;AAAEC,QAAAA,aAAa,EAAG;AAAlB,OAAhC;AACH,KALL,EAMKC,KANL,CAMWC,KAAK,IAAI,CAAE,CANtB;AAOA,WAAOhB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAC5BH,MAAAA,IAAI,EAAE;AACFC,QAAAA,aAAa,EAAE;AADb;AADsB,KAAzB,CAAP;AAKH;;AACD,SAAOE,KAAP;AACH;;AAED,eAAeD,WAAf","sourcesContent":["import {\n    AUTHENTICATE,\n    LOGOUT,\n    UPDATE_PROFILE\n} from \"../constants/action-types\";\nimport axios from \"axios\";\n\nconst initialState = {\n    user: {\n        authenticated: false\n    }\n};\n\nfunction rootReducer(state = initialState, action) {\n    if (action.type === AUTHENTICATE) {\n        //this check the token in localStorage and set the default values for authenticated request from client\n        if (localStorage.getItem(\"user\") && localStorage.getItem(\"token\")) {\n            const token = localStorage.getItem(\"token\");\n            // axios.defaults.baseURL = 'http://localhost:3000/'\n            // axios.defaults.headers.common= {'Authorization': `Bearer ${token}`}\n\n            return Object.assign({}, state, {\n                user: {\n                    authenticated: action.payload.authenticated,\n                    email: action.payload.user.email,\n                    name: action.payload.user.name,\n                    phone: action.payload.user.phone\n                }\n            });\n        }\n    }\n\n    if (action.type === UPDATE_PROFILE) {\n        return Object.assign({}, state, {\n            user: {\n                email: action.payload.user.email,\n                name: action.payload.user.name,\n                phone: action.payload.user.phone\n            }\n        });\n    }\n\n    //logout the user and delete the token in localStorage and in the server as well\n    if (action.type === LOGOUT) {\n        localStorage.clear();\n        axios\n            .post(`users/logout`)\n            .then(response => {\n                axios.defaults.baseURL = \"\";\n                axios.defaults.headers.common = { Authorization: `` };\n            })\n            .catch(error => {});\n        return Object.assign({}, state, {\n            user: {\n                authenticated: false\n            }\n        });\n    }\n    return state;\n}\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}